// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using N5.Entities.Migrations;
using System;

namespace N5.Entities.Migrations.Migrations
{
    [DbContext(typeof(EntityFrameworkSharedContext))]
    [Migration("20170925152912_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("N5.Entities.Customer.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("N5.Entities.Customer.CustomerField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("CustomerId")
                        .HasColumnName("customerId");

                    b.Property<string>("FieldName")
                        .HasColumnName("fieldname");

                    b.Property<string>("FieldTypeDescription")
                        .HasColumnName("fieldtype");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("customerfield");
                });

            modelBuilder.Entity("N5.Entities.Customer.CustomerFieldSourceMap", b =>
                {
                    b.Property<long>("CustomerFieldID");

                    b.Property<long>("SourceFieldID");

                    b.Property<int>("Order");

                    b.HasKey("CustomerFieldID", "SourceFieldID");

                    b.HasIndex("SourceFieldID");

                    b.ToTable("customerfieldsourcemap");
                });

            modelBuilder.Entity("N5.Entities.Product.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("N5.Entities.Product.ProductTypeField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("FieldName")
                        .HasColumnName("Fieldname");

                    b.Property<string>("FieldTypeDescription")
                        .HasColumnName("Fieldtype");

                    b.Property<long>("ProductTypeId")
                        .HasColumnName("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeField");
                });

            modelBuilder.Entity("N5.Entities.Product.ProductTypeFieldSourceMap", b =>
                {
                    b.Property<long>("ProductTypeFieldID");

                    b.Property<long>("SourceFieldID");

                    b.Property<int>("Order");

                    b.HasKey("ProductTypeFieldID", "SourceFieldID");

                    b.HasIndex("SourceFieldID");

                    b.ToTable("ProductTypeFieldSourceMap");
                });

            modelBuilder.Entity("N5.Entities.Source.Source", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("source");
                });

            modelBuilder.Entity("N5.Entities.Source.SourceField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FieldName")
                        .HasColumnName("fieldname");

                    b.Property<string>("FieldTypeDescription")
                        .HasColumnName("fieldtype");

                    b.Property<long>("SourceId")
                        .HasColumnName("sourceId");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("sourcefield");
                });

            modelBuilder.Entity("N5.Entities.Customer.CustomerField", b =>
                {
                    b.HasOne("N5.Entities.Customer.Customer", "Customer")
                        .WithMany("CustomerFields")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("N5.Entities.Customer.CustomerFieldSourceMap", b =>
                {
                    b.HasOne("N5.Entities.Customer.CustomerField", "CustomerField")
                        .WithMany("SourceFields")
                        .HasForeignKey("CustomerFieldID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("N5.Entities.Source.SourceField", "SourceField")
                        .WithMany()
                        .HasForeignKey("SourceFieldID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("N5.Entities.Product.ProductTypeField", b =>
                {
                    b.HasOne("N5.Entities.Product.ProductType", "ProductType")
                        .WithMany("ProductTypeFields")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("N5.Entities.Product.ProductTypeFieldSourceMap", b =>
                {
                    b.HasOne("N5.Entities.Product.ProductTypeField", "ProductTypeField")
                        .WithMany()
                        .HasForeignKey("ProductTypeFieldID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("N5.Entities.Source.SourceField", "SourceField")
                        .WithMany()
                        .HasForeignKey("SourceFieldID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("N5.Entities.Source.SourceField", b =>
                {
                    b.HasOne("N5.Entities.Source.Source", "Source")
                        .WithMany("SourceFields")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
