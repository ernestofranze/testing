version: '4'
services:
#  gateway:
#    image: nginx:1.13
#    volumes:
#     - ./gateway/gateway.conf:/etc/nginx/conf.d/default.conf:ro
#    ports:
#     - "80"
#     - "443"
  db_customers:
    image: postgres:9.6
    environment:
      POSTGRES_DB: encinco
      POSTGRES_USER: encinco
      POSTGRES_PASSWORD: encinco
#    volumes:
#     - backoffice-data:/var/lib/postgresql/data
    ports:
     - "5432:5432"
    networks:
     - appnet
#  mail:
#    image: mailhog/mailhog:latest
#    ports:
#     - "8025:8025"
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - appnet
#    volumes:
#      - zk-data:/var/lib/zookeeper/data
#      - zk-log:/var/lib/zookeeper/log
  kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - appnet
#    volumes:
#      - kafka-data:/var/lib/kafka/data
  kafka-api:
    image: confluentinc/cp-kafka-rest
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_REST_LISTENERS: "http://kafka-api:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KAFKA_REST_HOST_NAME: "kafka-api"
    networks:
      - appnet
#  schema-registry:
#    image: confluentinc/cp-schema-registry
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
#      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
#      SCHEMA_REGISTRY_LISTENERS: "http://schema-registry:8081"
#      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
#      SCHEMA_REGISTRY_LOG4J_LOGGERS: "org.apache.avro.Schema=DEBUG"
#    networks:
#      - appnet
#  customers-jdbc-sink:
#    image: confluentinc/cp-kafka-connect
#    depends_on:
#      - zookeeper
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
#      CONNECT_REST_PORT: 8082
#      CONNECT_GROUP_ID: "customersPostgres"
#      CONNECT_CONFIG_STORAGE_TOPIC: "customers-sink-config"
#      CONNECT_OFFSET_STORAGE_TOPIC: "customers-sink-offsets"
#      CONNECT_STATUS_STORAGE_TOPIC: "customers-sink-status"
#      CONNECT_REST_ADVERTISED_HOST_NAME: "customers-jdbc-sink"
#      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
##    ports:
##      - "8082:8082"
#    volumes:
#      - ./config/jdbc:/sink:ro
#      - ./config/schema:/schema:ro
#    command: connect-standalone schema/avro.properties sink/customers-sink.properties
#    networks:
#      - appnet
#  customers-elastic-sink:
#    image: confluentinc/cp-kafka-connect
#    depends_on:
#      - zookeeper
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
#      CONNECT_REST_PORT: 8082
#      CONNECT_GROUP_ID: "customers-elastic"
#      CONNECT_CONFIG_STORAGE_TOPIC: "customers-elastic-sink-config"
#      CONNECT_OFFSET_STORAGE_TOPIC: "customers-elastic-sink-offsets"
#      CONNECT_STATUS_STORAGE_TOPIC: "customers-elastic-sink-status"
#      CONNECT_REST_ADVERTISED_HOST_NAME: "customers-elastic-sink"
#      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
#    volumes:
#      - ./config/elastic:/sink:ro
#      - ./config/schema:/schema:ro
#    command: connect-standalone schema/json.properties sink/customers-sink.properties
#    networks:
#      - appnet
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
    ports:
     - "9200:9200"
     - "9300:9300"
    environment:
#      http.host: "0.0.0.0"
#      transport.host: "127.0.0.1"
      xpack.security.enabled: "false"
#    volumes:
#      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - appnet
  kibana:
    image: docker.elastic.co/kibana/kibana:5.5.2
    depends_on:
      - elastic
    ports:
     - "5601:5601"
    environment:
      SERVER_NAME: kibana.n5.dev
      ELASTICSEARCH_URL: http://elastic:9200
    networks:
      - appnet
networks:
  appnet:
    driver: "bridge"
